-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

CREATE TABLE IF NOT EXISTS public.ingredients
(
    name character varying COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    CONSTRAINT ingredients_pkey PRIMARY KEY (name)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.ingredients
    OWNER to postgres;

ALTER TABLE IF EXISTS public.ingredients
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.ingredients TO anon;

GRANT ALL ON TABLE public.ingredients TO authenticated;

GRANT ALL ON TABLE public.ingredients TO postgres;

GRANT ALL ON TABLE public.ingredients TO service_role;

CREATE POLICY "Enable insert for authenticated users only"
    ON public.ingredients
    AS PERMISSIVE
    FOR ALL
    TO public
    USING ((auth.role() = 'authenticated'::text))
    WITH CHECK ((auth.role() = 'authenticated'::text));

CREATE TABLE IF NOT EXISTS public.recipes
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    name character varying COLLATE pg_catalog."default" NOT NULL,
    content text COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    author uuid NOT NULL,
    CONSTRAINT recipes_pkey PRIMARY KEY (id),
    CONSTRAINT recipes_author_fkey FOREIGN KEY (author)
        REFERENCES auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.recipes
    OWNER to postgres;

ALTER TABLE IF EXISTS public.recipes
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.recipes TO anon;

GRANT ALL ON TABLE public.recipes TO authenticated;

GRANT ALL ON TABLE public.recipes TO postgres;

GRANT ALL ON TABLE public.recipes TO service_role;
CREATE POLICY "Enable all for users based on author"
    ON public.recipes
    AS PERMISSIVE
    FOR ALL
    TO public
    USING ((auth.uid() = author));

CREATE TABLE IF NOT EXISTS public.recipe_ingredients
(
    recipe_id uuid NOT NULL,
    ingredient_name character varying COLLATE pg_catalog."default" NOT NULL,
    unit character varying COLLATE pg_catalog."default" NOT NULL,
    quantity character varying COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    "order" smallint NOT NULL,
    CONSTRAINT recipe_ingredients_pkey PRIMARY KEY (recipe_id, ingredient_name),
    CONSTRAINT recipe_ingredients_ingredient_name_fkey FOREIGN KEY (ingredient_name)
        REFERENCES public.ingredients (name) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT recipe_ingredients_recipe_id_fkey FOREIGN KEY (recipe_id)
        REFERENCES public.recipes (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.recipe_ingredients
    OWNER to postgres;

ALTER TABLE IF EXISTS public.recipe_ingredients
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.recipe_ingredients TO anon;

GRANT ALL ON TABLE public.recipe_ingredients TO authenticated;

GRANT ALL ON TABLE public.recipe_ingredients TO postgres;

GRANT ALL ON TABLE public.recipe_ingredients TO service_role;
CREATE POLICY "Enable all for users based on user_id"
    ON public.recipe_ingredients
    AS PERMISSIVE
    FOR ALL
    TO public
    USING ((auth.uid() IN ( SELECT recipes.author
   FROM recipes)));
